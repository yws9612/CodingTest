package inflearn;

public class infTree {
    public static void main(String[] args) {
        /*
        Tree : 서로 연결된 Node의 계층형 자료구조로써, root와 부모-자식 관계의 subtree로 구성되어있음.
        ex) A, B, C ...는 각각 Node/일렬로 연결되어있다면 LinkedList
                    A
                 /  ㅣ  \
               B    C   D
             /  \         \
            E    F         G

         노드 : 트리는 보통 노드로 구현
         간선 : 노드간에 연결된 선(/, ㅣ, \)
         루트 노드 : 트리는 항상 루트에서 시작(최상위 노드, A)
         리프 노드 : 더이상 뻗어나갈 수 없는 마지막 노드(E, F, G)
         자식 노드 : 간선으로 연결되어있는 노드 중 하위 노드
         부모 노드 : 간선으로 연결되어있는 노드 중 상위 노드
         형제 노드 : 동일한 부모의 서로 다른 간선으로 연결되어있는 노드
         차수 : 각 노드가 갖는 자식의 수. 모든 노드의 차수가 n개 이하인 트리를 n진 트리라고 부름.
            ex) A의 차수는 3, B는 차수가 2, C는 차수가 0 ..., 해당 트리의 차수는 최대가 3이기 때문에 3진 트리
         조상 : 위쪽으로 간선을 따라가면 만나는 모든 노드
            ex) G의 조상 노드는 D, A
         자손 : 아래쪽으로 간선을 따라가면 만나는 모든 노드
            ex) B의 자손 노드는 E, F
         레벨 : 루트 노드에서 떨어진 거리
            ex) A 노드는 레벨 0, B, C, D는 레벨 1, E, F, G는 레벨 2
         높이 : 루트노드에서 가장 멀리 있는 리프 노드까지의 거리. 즉, 리프 노드중에 최대 레벨 값
            ex) 리프 노드의 레벨은 2이기 때문에 높이는 2
         서브 트리 : 트리의 어떤 노드를 루트로 하고, 그 자손으로 구성된 트리를 subtree라고 함.
            ex) B라는 노드를 루트로 생각 할 경우 B, E, F는 한 개의 서브트리가 됨.
         */
    }
}
