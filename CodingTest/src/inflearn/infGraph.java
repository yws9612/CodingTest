package inflearn;

public class infGraph {
    public static void main(String[] args) {
        /*
        그래프 : 어떤 자료나 개념을 표현하는 정점(Vertex)들의 집합 V와 이들을 연결하는 간선(edge)들의 집합 E로 구성된 자료구조

        그래프와 트리는 비슷한 개념을 가짐

        그러나, 트리는 하향식 구조를 갖고있고, 그래프는 모두 연결 가능한 구조를 갖고있음.

        그래프 활용
            ㄴ 도시들을 연결하는 도로망 : 도시(vertex), 도로망(edge)
            ㄴ 지하철 연결 노선도 : 정거장(vertex), 정거장을 연결한 선(edge)
            ㄴ 컴퓨터 네트워크 : 각 컴퓨터와 라우터(vertex), 라우터간의 연결 관계(edge)
            ㄴ 소셜 네트워크 분석 : 페이스북의 계정(vertex), follow 관계(edge)

        방향 그래프 vs 무향 그래프(코테에 가장 많이 등장)
        다중 그래프 vs 단순 그래프
        가중치 그래프 => 다익스트라

        방향 그래프 : 방향이 정해져 있는 그래프(단방향)
        **무향 그래프 : 방향이 정해져 있지 않은 그래프(양방향)**
        다중 그래프 : 간선이 여러개가 존재할 수 있음
        단순 그래프 : 서로 연결되어있는 정점들의 간선이 단 한개만 존재함
        가중치 그래프 : 간선의 가중치가 들어가있는 그래프(다익스트라 사용)

        그래프 표현 방법
            1) 인접 리스트(adjacency list)
                ㄴ {
                      1: [3, 5],
                      2: [4, 5],
                      3: [1, 5],
                      4: [2, 5],
                      5: [1, 2, 3, 4]
                   }
                ㄴ 이중 배열로 키 값에 정점 이름을 작성, 키 값별 연결된 정점만 표현
            2) 인접 행렬(adjacency matrix)
                ㄴ [
                    {0, 0, 1, 0, 1}(1번 정점이 3번, 5번 정점과 연결돼있음),
                    {0, 0, 0, 1, 1}(2번 정점이 4번, 5번 정점과 연결돼있음),
                    {1, 0, 0, 0, 1}(3번 정점이 1번, 5번 정점과 연결돼있음),
                    {0, 1, 0, 0, 1}(4번 정점이 2번, 5번 정점과 연결돼있음),
                    {1, 1, 1, 1, 0}(5번 정점이 1번, 2번, 3번, 4번 정점과 연결돼있음)
                   ]
                 ㄴ 위와 같이 구현 될 경우 존재하지 않는 값을 0으로 표현하기 때문에 메모리 낭비가 심함.
            3) 암시적 그래프(implicit graph)
                ㄴ ex) 미로찾기. 벽은 1, 길은 0으로 표현 후, 정점의 상, 하, 좌, 우로 연결된 그래프로 봄.
                ㄴ [
                    {1, 1, 1, 1, 1},
                    {0, 0, 0, 1, 1},
                    {1, 1, 0, 0, 1},
                    {1, 0, 0, 0, 0},
                    {1, 1, 1, 1, 1}
                   ]와 같은 그래프의 각 정점에 x,y좌표를 사용해서 암시적으로 표현함.

         */
    }
}
